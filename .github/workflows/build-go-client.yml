name: Build and Release Go Client

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-go:
    name: Build Go Client
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # MIPS architectures
          - goos: linux
            goarch: mips
            name: linux-mips
          - goos: linux
            goarch: mipsle
            name: linux-mipsle
          - goos: linux
            goarch: mips64
            name: linux-mips64
          - goos: linux
            goarch: mips64le
            name: linux-mips64le
          
          # RISC-V architectures
          - goos: linux
            goarch: riscv64
            name: linux-riscv64
          
          # Additional MIPS variants for different operating systems
          - goos: freebsd
            goarch: mips64
            name: freebsd-mips64
          - goos: openbsd
            goarch: mips64
            name: openbsd-mips64
          
          # Additional cross-platform builds for completeness
          - goos: linux
            goarch: ppc64
            name: linux-ppc64
          - goos: linux
            goarch: ppc64le
            name: linux-ppc64le
          - goos: linux
            goarch: s390x
            name: linux-s390x
          - goos: linux
            goarch: sparc64
            name: linux-sparc64
          
          # Windows MIPS (if supported)
          - goos: windows
            goarch: mips
            name: windows-mips
          - goos: windows
            goarch: mipsle
            name: windows-mipsle

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install protobuf compiler
        run: |
          sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Download dependencies
        working-directory: ./sshx-go
        run: go mod download

      - name: Build Go client
        working-directory: ./sshx-go
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          binary_name="sshxtend-go"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          go build -ldflags="-s -w" -o "${binary_name}" .

      - name: Create archive
        working-directory: ./sshx-go
        run: |
          binary_name="sshxtend-go"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
            zip "../sshxtend-go-${{ matrix.name }}.zip" "${binary_name}"
          else
            tar -czf "../sshxtend-go-${{ matrix.name }}.tar.gz" "${binary_name}"
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sshxtend-go-${{ matrix.name }}
          path: sshxtend-go-${{ matrix.name }}.*

  # Test builds for validation
  test-builds:
    name: Test Builds
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install protobuf compiler
        run: |
          sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Test native build
        working-directory: ./sshx-go
        run: |
          go mod download
          go build -o sshxtend-go-test .
          ./sshxtend-go-test --help || echo "Built successfully but help command failed (expected for client)"

      - name: Test cross-compilation (sample architectures)
        working-directory: ./sshx-go
        run: |
          # Test a few representative architectures to ensure cross-compilation works
          GOOS=linux GOARCH=mips64 CGO_ENABLED=0 go build -o test-mips64 .
          GOOS=linux GOARCH=riscv64 CGO_ENABLED=0 go build -o test-riscv64 .
          ls -la test-*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-go, test-builds]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}