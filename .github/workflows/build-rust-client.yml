name: Build and Release Rust Client

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-rust:
    name: Build Rust Client
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Windows x86-64
          - target: x86_64-pc-windows-msvc
            runner: windows-latest
            
          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            runner: windows-latest
            
          # Linux AMD64
          - target: x86_64-unknown-linux-musl
            runner: ubuntu-latest
            
          # Linux ARM64
          - target: aarch64-unknown-linux-musl
            runner: ubuntu-latest
            
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            runner: macos-latest
            
          # macOS x86-64 (Intel)
          - target: x86_64-apple-darwin
            runner: macos-13

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux)
        if: contains(matrix.target, 'linux-musl')
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install protobuf compiler
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y protobuf-compiler
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install protobuf
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install protoc
          fi
        shell: bash

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build client
        run: cargo build --release --bin sshx --target ${{ matrix.target }}

      - name: Rename binary (Windows)
        if: contains(matrix.target, 'windows')
        run: |
          cd target/${{ matrix.target }}/release
          copy sshx.exe sshxtend-${{ matrix.target }}.exe
        shell: cmd

      - name: Rename binary (Unix)
        if: "!contains(matrix.target, 'windows')"
        run: |
          cd target/${{ matrix.target }}/release
          cp sshx sshxtend-${{ matrix.target }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sshxtend-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/sshxtend-${{ matrix.target }}*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-rust
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}